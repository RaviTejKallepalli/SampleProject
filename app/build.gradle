apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion 29
    buildToolsVersion "30.0.1"

    defaultConfig {
        applicationId "com.example.sampleproject"
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }
}

dependencies {

    def lifecycle_version = "2.2.0"

    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'


    //The Fragment KTX module provides a number of extensions to simplify the fragment API.
    implementation "androidx.fragment:fragment-ktx:1.2.5"

    //The Collection extensions contain utility functions for working with Android's memory-efficient collection
    //libraries, including ArrayMap, LongParseArray, LruCache, and others.
    implementation "androidx.collection:collection-ktx:1.1.0"

    //Lifecycle KTX defines a LifecycleScope for each Lifecycle object.
    //Any coroutine launched in this scope is canceled when the Lifecycle is destroyed.
    //You can access the CoroutineScope of the Lifecycle by using the lifecycle.coroutineScope or lifecycleOwner.lifecycleScope properties.
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$lifecycle_version"

    //Reactive Streams KTX module lets you create an observable LiveData stream from a ReactiveStreams publisher.
    implementation "androidx.lifecycle:lifecycle-reactivestreams-ktx:$lifecycle_version"

    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$lifecycle_version"

    //The ViewModel KTX library provides a viewModelScope() function that makes it easier to launch coroutines
    //from your ViewModel. The CoroutineScope is bound to Dispatchers.Main and is automatically cancelled
    //when the ViewModel is cleared. You can use viewModelScope() instead of creating a new scope for each ViewModel.
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$lifecycle_version"

    //WorkManager KTX provides first-class support for coroutines.
    implementation "androidx.work:work-runtime-ktx:2.3.4"


    def paging_version = "2.1.2"

    implementation "androidx.paging:paging-runtime-ktx:$paging_version"

    // alternatively - without Android dependencies for testing
    testImplementation "androidx.paging:paging-common-ktx:$paging_version"

    // optional - RxJava support
    implementation "androidx.paging:paging-rxjava2-ktx:$paging_version"

    //room
    def room_version = "2.2.5"

    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"


    // Test helpers
    testImplementation "androidx.room:room-testing:$room_version"

    testImplementation 'junit:junit:4.13'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    androidTestImplementation 'androidx.test:core-ktx:1.2.0'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test:rules:1.2.0'
    androidTestImplementation 'org.hamcrest:hamcrest-library:1.3'
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'

    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation 'org.mockito:mockito-core:2.25.0'

}